# BEGIN PLATFORM BUILD CONFIGURATION
platform_c_sources = ["runtests.c", "plat.c"]
platform_py_sources = Glob("t*.py")
pmlib_py_sources = [
    "#src/lib/__bi.py",
    "#src/lib/sys.py",
#    "#src/lib/ipm.py",
    "#src/lib/string.py",
    "#src/lib/list.py",
    "#src/lib/dict.py",
    ]
HAVE_FLOAT = "little endien"
HAVE_DEBUG_INFO = True
# END PLATFORM BUILD CONFIGURATION


# Initialize Scons' construction environment
import sys
cflags = "-Wall -Wstrict-prototypes -Werror "
cflags_dbg = "-ggdb -D__DEBUG__=1 "
cflags_opt = "-Os "
Import("vars")
env_dbg = Environment(variables = vars,
    CPPPATH = ["#src/vm", "#src/tests/system/build"],
    CCFLAGS = cflags + cflags_opt,
    LINKFLAGS = "-Wl,-map $runtests_map")
env = env_dbg
if not sys.platform.startswith("win"):
    env['ARFLAGS'] = "rcs"

# Generate pmfeatures.h
pmfeatures_py = File("#src/platform/desktop/pmfeatures.py")
pmfeatures_h = env.Command("pmfeatures.h", pmfeatures_py,
    "src/tools/pmGenPmFeatures.py $SOURCE > $TARGET")

# Copy desktop plat source files
plat_h = env.Command("#src/tests/system/build/plat.h",
                     "#src/platform/desktop/plat.h",
                     Copy("$TARGET", "$SOURCE"))
plat_c = env.Command("#src/tests/system/build/plat.c",
                     "#src/platform/desktop/plat.c",
                     Copy("$TARGET", "$SOURCE"))

# Generate code objs and types
generated_objs = [File("#src/tests/system/build/pm_generated_objs.c"),
                  File("#src/tests/system/build/pm_generated_types.h")]
pm_generated_codeobjs = env.Command(generated_objs,
    platform_py_sources + pmlib_py_sources,
    "src/tools/pmCoCreator.py %s src/tests/system/build $SOURCES" % pmfeatures_py)
Depends(pm_generated_codeobjs, pmfeatures_py)#[pmfeatures_py, plat_h, plat_c])

# Build pmvm library, a linker map and the executable
runtests_map = env.Command("#src/tests/system/build/runtests.map", "", Touch("$TARGET"))
pmvm_lib = env.SConscript("#src/vm/SConscript", "env", variant_dir = "vm")
runtests = env.Program("runtests", [runtests_map, platform_c_sources + pmvm_lib,
                       "#src/tests/system/build/pm_generated_objs.c"])

env.AlwaysBuild(env.Alias("check", [], runtests[0].abspath))
env.Depends("check", runtests[0].abspath)
Clean("check", "zem") # File "zem" created by t230.py


#:mode=python:
